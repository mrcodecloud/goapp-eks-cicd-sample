# Set up the name and trigger for the workflow
name: CI/CD Go app sample
on:
  push:
    branches:
      - main

# Define environment variables used throughout the workflow
env:
  ECR_REGISTRY: ${{ secrets.AWS_REGISTRY }} # ECR registry to push Docker image to
  ECR_REPOSITORY: go-app # name of the Docker repository
  IMAGE_TAG: ${{ github.sha }} # unique tag for the Docker image

# Define the jobs to be run in the workflow
jobs:
  build:
    runs-on: ubuntu-latest # specify the runner OS for the job

    steps:
      - name: Checkout # checkout the code from GitHub
        uses: actions/checkout@v2

      - name: Set up Go # set up the Go environment
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'

      - name: Lint code # run the code linter
        uses: golangci/golangci-lint-action@v2 # use the golangci-lint GitHub action
        with:
          args: ['run'] # pass the 'run' argument to run the linter

      - name: Run tests # run the unit tests
        run: |
          go test ./... # run all tests in the project

      - name: Build and push Docker image # build the Docker image and push it to ECR
        env:
          AWS_REGION: us-west-2 # specify the AWS region
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # access key for AWS
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # secret access key for AWS
        run: |
          $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION }}) # log in to ECR
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} . # build the Docker image
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} # push the Docker image to ECR

      - name: Deploy to EKS # deploy the application to EKS
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }} # specify the Kubernetes config file
        run: |
          kubectl apply -f deployment.yaml # apply the deployment manifest to the cluster